{
  "name": "Fluenttextgenerator",
  "tagline": "Configurable fluent API for random text generation",
  "body": "# FluentTextGenerator\r\n\r\n##Configurable fluent API for random text generation##\r\n\r\n###Basic usage###\r\nThis library can be used to create random strings, for example for automated key generation.\r\n\r\nThe simplest way to generate a random string is to use the default library configuration:\r\n\r\n\tConsole.WriteLine(new FluentTextGenerator().Configure().Generate()); // BuJZKhWk3BQsA{O1ho-...\r\n\r\nThe default configuration generates strings using:\r\n- random minimal length (a value between 1 and 250)\r\n- random maximal length (a value between 1 and 250; >= the minimal length)\r\n- an alphabet consisting of\r\n  - small characters a-z\r\n  - capital characters A-Z\r\n  - numbers 0-9\r\n  - special symbols .,+-*/!?;:{}()[]%$&~#@|><\r\n\r\nEvery option can be explicitely set using the fluent API:\r\n- *MinLength(int min)*\r\n\t- default is 0, meaning random between 1 and 250\r\n- *MaxLength(int max)*\r\n\t- default is 0, meaning random between 1 and 250, but >= MinLength\r\n- *IncludeCapitalCharacters(bool yes)* \r\n\t- default is true\r\n- *IncludeSmallCharacters(bool yes)*\r\n\t- default is true\r\n- *IncludeNumbers(bool yes)*\r\n\t- default is true\r\n- *IncludeSpecialCharacters(bool yes)*\r\n\t- default is true\r\n\r\nThis call:\r\n\r\n\tConsole.WriteLine(new FluentTextGenerator()\r\n\t\t\t\t.Configure()\r\n\t\t\t\t.MinLength()\r\n\t\t\t\t.MaxLength()\r\n\t\t\t\t.IncludeCapitalCharacters()\r\n\t\t\t\t.IncludeSmallCharacters()\r\n\t\t\t\t.IncludeNumbers()\r\n\t\t\t\t.IncludeSpecialCharacters()\r\n\t\t\t\t.Generate());\r\n\r\nis the same as the first example:\r\n\r\n\tConsole.WriteLine(new FluentTextGenerator().Configure().Generate());\r\n\r\nUsing the fluent API the configuration could be set from some custom settings:\r\n\r\n\tConsole.WriteLine(new FluentTextGenerator()\r\n\t\t\t\t.Configure()\r\n\t\t\t\t.MinLength(min)\r\n\t\t\t\t.MaxLength(max)\r\n\t\t\t\t.IncludeCapitalCharacters(includeCapitalCharacters)\r\n\t\t\t\t.IncludeSmallCharacters(includeSmallCharacters)\r\n\t\t\t\t.IncludeNumbers(includeNumbers)\r\n\t\t\t\t.IncludeSpecialCharacters(includeSpecialCharacters)\r\n\t\t\t\t.Generate());\r\n\r\nThe configuration options can also be used individually or in a combination:\r\n\r\n\tConsole.WriteLine(new FluentTextGenerator()\r\n\t\t\t\t\t\t.Configure()\r\n\t\t\t\t\t\t.MinLength(5)\r\n\t\t\t\t\t\t.MaxLength(10)\r\n\t\t\t\t\t\t.IncludeSpecialCharacters(false)\r\n\t\t\t\t\t\t.Generate()); \r\n\t// Output: jYsF3tv\r\n\r\n###More options###\r\n\r\nThe API allows you to overwrite the list of special characters using the \r\n\r\n\tIncludeSpecialCharacters(yes, specialCharacters)\r\n\t\r\noverload method. By default the second parameter *specialCharacters* is set to an empty string - the generator uses the internally defined default list: \r\n\r\n\t.,+-*/!?;:{}()[]%$&~#@|><\r\n\t\r\nIf the second parameter is set, then the characters in it are used as special characters:\r\n\r\n\tConsole.WriteLine(new FluentTextGenerator()\r\n\t\t\t\t\t\t.Configure()\r\n\t\t\t\t\t\t.MinLength(5)\r\n\t\t\t\t\t\t.MaxLength(10)\r\n\t\t\t\t\t\t.IncludeCapitalCharacters(false)\r\n\t\t\t\t\t\t.IncludeNumbers(false)\r\n\t\t\t\t\t\t.IncludeSmallCharacters(false)\r\n\t\t\t\t\t\t.IncludeSpecialCharacters(true, \"+-\")\r\n\t\t\t\t\t\t.Generate());\r\n\t// Output: +----++-++\r\n\t\r\nThe API allows you to exclude characters from the alphabet used for the string generation:\r\n\r\n\tConsole.WriteLine(new FluentTextGenerator()\r\n\t\t\t\t\t\t.Configure()\r\n\t\t\t\t\t\t.MinLength(5)\r\n\t\t\t\t\t\t.MaxLength(10)\r\n\t\t\t\t\t\t.IncludeCapitalCharacters(false)\r\n\t\t\t\t\t\t.IncludeNumbers(false)\r\n\t\t\t\t\t\t.IncludeSmallCharacters(false)\r\n\t\t\t\t\t\t.IncludeSpecialCharacters(true, \"+-.!\")\r\n\t\t\t\t\t\t.ExcludeCharacters(\"-.\")\r\n\t\t\t\t\t\t.Generate());\r\n\t// Output: !+!!+!++!\r\n\t\r\nThe API allows you to replace characters **after** the generation has completed:\r\n\r\n\tConsole.WriteLine(new FluentTextGenerator()\r\n\t\t\t\t\t\t.Configure()\r\n\t\t\t\t\t\t.MinLength(5)\r\n\t\t\t\t\t\t.MaxLength(10)\r\n\t\t\t\t\t\t.IncludeCapitalCharacters(false)\r\n\t\t\t\t\t\t.IncludeNumbers(false)\r\n\t\t\t\t\t\t.IncludeSmallCharacters(false)\r\n\t\t\t\t\t\t.IncludeSpecialCharacters(true, \"+-.!\")\r\n\t\t\t\t\t\t.Replace(\".\", \"~\")\r\n\t\t\t\t\t\t.Replace(\"+\", \"plus\")\r\n\t\t\t\t\t\t.Generate());\r\n\t// Output: ~!~plusplus~!plus\r\n\t\r\n**Please note, that with the replace operation it is possible to exceed the configured maximal text length!**\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}